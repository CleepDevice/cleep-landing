[{"content":"Here is an exhaustive list of already available Cleep applications. This list will evolve over time thanks to you ;-)\nSystem applications # System applications are automatically installed with Cleep and are mandatory for a proper functioning.\nUpdate: Handle device applications based on Cleep applications market. System: Fine tune your device monitoring it (memory, cpu), tweak device (LED), handle installed drivers\u0026hellip; Audio: Handle audio on your device (volume, select hardware to use). Network: Handle device network configuration. Cleepbus: Allows communications with all Cleep devices and cleep-desktop. Parameters: Configure device settings: device name, device localisation, secured access. Alert applications # Email: Send email from your device using selected provider. FreemobileSms: Send SMS using french Freemobile provider. Hardware applications # Gpios: Basic access configuration to raspberry pi gpios. Sensors: Easily configure sensors (temperature, humidity\u0026hellip;) on your device. FourLetterDisplay: Quickly configure Piromino four letter display on your device. Weather applications # OpenWeatherMap: Connect and retrieve automatically weather conditions on OpenWeatherMap provider. Remote access applications # Ngrok: Access to your device outside from your home. Home automation applications # FilPilote: Control your electric heaters using french fil-pilote protocol. AlarmClock: Transform your device in alarm clock. Charts: Give your device the capability to build visual charts to display some data. Media applications # LocalMusic: Upload music file and manage playlists from your device. AudioPlayer: Transform your device on audio player. ","date":"3 May 2025","externalUrl":null,"permalink":"/articles/applications/","section":"Articles","summary":"","title":"Applications","type":"articles"},{"content":"","date":"3 May 2025","externalUrl":null,"permalink":"/articles/","section":"Articles","summary":"","title":"Articles","type":"articles"},{"content":"","date":"3 May 2025","externalUrl":null,"permalink":"/","section":"Cleep","summary":"","title":"Cleep","type":"page"},{"content":" Introduction # cleep-cli is an application to help developer programming on Cleep project. It includes both core and application helpers.\nFeatures # Handle generic application skeleton helpers (create, delete, synchronize source) Run application unit test Provide check helpers to validate application Generate documentation Integrates code changes watcher Installation # Install cleep-cli using following command\npip install --update cleepcli ","date":"3 May 2025","externalUrl":null,"permalink":"/articles/tools/cleep-cli/","section":"Articles","summary":"","title":"cleep-cli","type":"articles"},{"content":" Introduction # cleep-core is the basis of Cleep project.\nCore acts like a framework to provide standard way to create an application that will bring functionnality to the device.\nIt also provides some libraries to help developer to easily interact with the Raspberry pi and configure it.\nFeatures # Backend # Python 3.9 Libraries to update Raspberry pi configuration files Libraries to help during developments (make task, access filesystem, unit tests helpers\u0026hellip;) Libraries to execute system binaries and handle their response easily Internal message bus to easily communicate with other applications Frontend # Based on AngularJS framework Components library to quickly develop pages Native icon library Library to handle requests with your application backend Native application lazy-loading CleepOS # Cleep framework is provided as ready to install .deb file and also with CleepOS image.\nCleepOS image is a tuned Raspberry pi OS image with readonly OS to protect SDCard from failure. This image has also some tweak to optimize it.\nThe latest CleepOS image is directly available from cleep-desktop application. You can find it here.\nIf you prefer install Cleep directly on your existing Raspberry pi, you can download latest cleep package here\nWhy AngularJS in 2025 # Historically AngularJS was the framework available when the project starts in 2016.\nAfter some reflexions about migration to a newest framework, it has been decided to keep it until it doesn\u0026rsquo;t work.\nThe main pro of this framework is the simplicity of usage. All stuff realized with Cleep hides AngularJS complexity (lazy-loading) and for now Cleep doesn\u0026rsquo;t need more. Also the non-need to compile source code (typescript) optimizes rendering and make easy application package building.\nToo, while workforce of the project are not important, we are not wasting time to refactor something that still work. But if you are motivated to bring knowledge about new framework, we are pleased to help you in that work.\n","date":"3 May 2025","externalUrl":null,"permalink":"/articles/tools/cleep-core/","section":"Articles","summary":"","title":"cleep-core","type":"articles"},{"content":" Introduction # Cleep project provides full continuous integration to automatize delivery process.\nCode quality is focused during continuous integration. Some criteria are mandatory about code quality and confidence before application publication. The main goal of this is to guarantee application market contains quite good applications.\nFor now CI is not opened to public. We planned to develop web application to create developer account and get access to the CI results. But before we need to create a community and then, dependending of community enthusiasm we\u0026rsquo;ll spend time to create it. CI features # For application # Version check Installation on fresh Cleep environment (latest core version) Source code validation (generate a code quality note) Breaking changes detection Unit tests execution (generate a ode confidence note) Code coverage publication Api documentation generation and publication Publication on Cleep application market For core # Version check Installation on fresh Cleep environment (latest core version) Unit tests execution Code coverage publication Api documentation generation and publication Package publication New CleepOS generation and publication if necessary (new release) ","date":"3 May 2025","externalUrl":null,"permalink":"/articles/tools/cleep-ci/","section":"Articles","summary":"","title":"cleep-desktop","type":"articles"},{"content":" Introduction # cleep-desktop is an application that allows you to manage your devices.\nThe main goal of this application is to make easy device setup without any knowledge about network, system, computer programming\u0026hellip;\nFeatures # Cross-patform (Windows, Linux, macOS*) Quick access to latest available CleepOS version Embedded tool to flash SDCard Quick access to your devices to configure them Download # This application is available under windows and linux. You can download latest version here\nA macOS version was available but it is not build anymore due to missing knowledge about build process under this environement and up-to-date hardware. But it already worked before, we think with few efforts it could be possible to make it work again. ","date":"3 May 2025","externalUrl":null,"permalink":"/articles/tools/cleep-desktop/","section":"Articles","summary":"","title":"cleep-desktop","type":"articles"},{"content":" History # In 2012, I participated of the Ago-Control home automation controller developments for 4 years. Ago-control wanted to be as generic as possible to handle in the same way all existing devices, no matter the device protocol. In my opinion, the more generic an application is, the more complex it is to use. During that time, I helped to develop a lot of parts of this project: a security plugin, an RPC server, a Z-Wave protocol application, a MySensors application\u0026hellip; and started to understand how everything is working together.\nThe situation # During those years, I was facing some issues:\nSome new IoT protocols, like Z-Wave or ZigBee, were moving really fast at this time, and devices I bought quickly became obsolete due to hardware evolution. Devices still worked thanks to new protocol version compatibility, but they suffered from a lack of security, performance\u0026hellip; I also experienced bad communication with those protocols, and I was not really convinced, particularly with security devices (motion sensors). What happens if a security device encounters a communication issue during a robbery? :-( Some manufacturers stopped producing some kind of their products, and existing devices became unmaintained (for example, Squeezebox from Logitech, Google Home Assistant displays\u0026hellip;). So I spent money for nothing? What is the ecological impact on that\u0026hellip; and for my wallet\u0026hellip;? The prices of Z-Wave devices approached 60â‚¬. So to equip my house, I will have had to contact my bank advisor (just kidding, but it cost a lot of money for how many years ?). After MySensors plugin development, I started to build my own sensors to reduce the cost of my sensors. I took generally more than 2 hours to build a simple sensor sensor (hardware + software pieces). So I was really frustrated to take so much time to do that. At this time the protocol doesn\u0026rsquo;t allow OTA updates, so it was difficult to perform updates. Generic home automation software like Ago-Control was dedicated to people that work in IT. I mean, the complexity of making scenarios is not something everybody can understand without experience. Birth of ideas # So strong from encountered problems, I decided to start something new, focusing the project on those main purposes:\nSimplicity: the project should be able to provide a solution to reduce the complexity of IoT developing simple applications with as little configuration as possible. Recycling: the project should be based on generic and cheap hardware that could allow software evolution to change the main purpose of the device. Standard communication: the project should be based on well-known wireless technology that everybody has in his house, the Wifi. If communication troubles occurred, it is acceptable to buy another Wi-Fi router that will serve for other house devices (phone, tablet\u0026hellip;). Security is also performed by the Wi-Fi itself, so that\u0026rsquo;s one less problem. The solution # I decided that Raspberry Pi hardware was really good and stable platform to use:\nThis hardware already implements Wi-Fi connection without the need of adding something else. The power of the board was enough for most simple usage. If something powerful is necessary (motion detection for example), it is possible to buy a more powerful hardware version. The Raspberry Pi environment is really rich in hardware components. The board has by default a lot of inputs and outputs (called GPIOs). The organization behind the Raspberry Pi makes a really good job on application maintenance. So the environment is really stable. So Raspberry pi was definitely the best choice.\nThe beginning # In 2016, I finally started to develop the project. During the first time it was a project for myself only, but after talking about it with my friends, they convinced me that it should be a great idea to share.\n","date":"3 May 2025","externalUrl":null,"permalink":"/articles/project/","section":"Articles","summary":"","title":"Project","type":"articles"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]